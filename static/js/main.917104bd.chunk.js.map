{"version":3,"sources":["components/Container/index.js","components/Header/index.js","components/Content/index.js","components/Main/index.js","App.js","serviceWorker.js","index.js"],"names":["Container","props","className","fluid","Header","Content","state","employees","allEmployees","sortPosition","event","position","target","value","setState","filter","employee","team","sortDob","dob","sort","a","b","Date","getTime","fetch","then","response","json","catch","error","console","log","onChange","this","id","map","key","name","phone","email","Component","Main","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"oRAMeA,MAJf,SAAmBC,GACjB,OAAO,uCAAKC,UAAS,mBAAcD,EAAME,MAAQ,SAAW,KAAUF,KCOzDG,MARf,WACI,OACE,6BACE,oD,4BCFaC,E,4MAEjBC,MAAQ,CACJC,UAAW,GACXC,aAAc,I,EAoBlBC,aAAe,SAACC,GACZ,IAAMC,EAAWD,EAAME,OAAOC,MACb,QAAbF,EACA,EAAKG,SAAS,CAAEP,UAAW,EAAKD,MAAME,eAEtC,EAAKM,SAAS,CACVP,UAAW,EAAKD,MAAME,aAAaO,QAAO,SAAUC,GAChD,OAAIA,EAASC,OAASN,Q,EAStCO,QAAU,SAACR,GACP,IAAMS,EAAMT,EAAME,OAAOC,MACb,WAARM,EACA,EAAKL,SAAS,CACVP,UAAW,EAAKD,MAAMC,UAAUa,MAAK,SAAUC,EAAGC,GAG9C,OAFY,IAAIC,KAAKF,EAAEF,KAAKK,UAChB,IAAID,KAAKD,EAAEH,KAAKK,UACL,GAAK,OAGrB,aAARL,GACP,EAAKL,SAAS,CACVP,UAAW,EAAKD,MAAMC,UAAUa,MAAK,SAAUC,EAAGC,GAG9C,OAFY,IAAIC,KAAKF,EAAEF,KAAKK,UAChB,IAAID,KAAKD,EAAEH,KAAKK,UACL,GAAK,Q,kEAhDvB,IAAD,OAChBC,MAAM,qBACLC,MAAK,SAAUC,GACZ,OAAOA,EAASC,UAEnBF,MAAK,SAACC,GACH,EAAKb,SAAS,CACVP,UAAWoB,EACXnB,aAAcmB,OAGrBE,OAAM,SAACC,GACJC,QAAQC,IAAIF,Q,+BA2ChB,OACI,6BACI,6BACI,oDACA,4BAAQG,SAAUC,KAAKzB,aAAc0B,GAAG,YACpC,4BAAQtB,MAAM,OAAd,OACA,4BAAQA,MAAM,cAAd,cACA,4BAAQA,MAAM,aAAd,aACA,4BAAQA,MAAM,YAAd,YACA,4BAAQA,MAAM,cAAd,cACA,4BAAQA,MAAM,cAAd,gBAGR,6BACI,sDACI,4BAAQoB,SAAUC,KAAKhB,SACnB,2CACA,4BAAQL,MAAM,UAAd,UACA,4BAAQA,MAAM,YAAd,cAGZ,2BAAOX,UAAU,mCACb,2BAAOA,UAAU,mBACb,4BAEI,oCACA,mCACA,wCACA,4CACA,uCAGR,+BACKgC,KAAK5B,MAAMC,UAAU6B,KAAI,SAAUpB,GAChC,OACI,wBAAIqB,IAAKrB,EAASmB,IACd,4BAAKnB,EAASsB,MACd,4BAAKtB,EAASG,KACd,4BAAKH,EAASC,MACd,4BAAKD,EAASuB,OACd,4BAAKvB,EAASwB,kB,GAtGbC,aCQpBC,MARjB,WACI,OACI,yBAAKxC,UAAU,QACX,kBAAC,EAAD,Q,MCYGyC,MAXf,WACE,OACE,yBAAKzC,UAAU,OACb,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,S,MCAY0C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB9B,MAAK,SAAA+B,GACJA,EAAaC,gBAEd7B,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAM6B,c","file":"static/js/main.917104bd.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Container(props) {\n  return <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />;\n}\n\nexport default Container;\n","import React from 'react';\n\nfunction Header () {\n    return(\n      <div>\n        <h1>Employee Directory</h1>\n      </div>\n    );   \n}\n\nexport default Header;\n","import React, { Component } from 'react';\n// import employees from '../employees.json';\n\nexport default class Content extends Component {\n\n    state = {\n        employees: [],\n        allEmployees: []\n    };\n\n    componentDidMount() {\n        fetch('../employees.json')\n        .then(function (response) {\n            return response.json();\n          })\n        .then((response) => {\n            this.setState({\n                employees: response,\n                allEmployees: response\n            })\n        })\n        .catch((error) => {\n            console.log(error)\n        });\n    };\n\n\n    sortPosition = (event) => {\n        const position = event.target.value;\n        if (position === 'All') {\n            this.setState({ employees: this.state.allEmployees });\n        } else {\n            this.setState({\n                employees: this.state.allEmployees.filter(function (employee) {\n                    if (employee.team === position) {\n                        return true;\n                    }\n                    return false;\n                  }),\n            });\n        }\n    };\n\n    sortDob = (event) => { \n        const dob = event.target.value;\n        if (dob === 'Oldest') {\n            this.setState({\n                employees: this.state.employees.sort(function (a, b) {\n                    var dateA = new Date(a.dob).getTime();\n                    var dateB = new Date(b.dob).getTime();\n                    return dateA > dateB ? 1 : -1;\n                  })\n            });\n        } else if (dob === 'Youngest') {\n            this.setState({\n                employees: this.state.employees.sort(function (a, b) {\n                    var dateA = new Date(a.dob).getTime();\n                    var dateB = new Date(b.dob).getTime();\n                    return dateA < dateB ? 1 : -1;\n                  })\n            }); \n        }\n     };\n\n    render () {\n        return(\n            <div>\n                <div>\n                    <label>Sort by position:</label>\n                    <select onChange={this.sortPosition} id='position'>\n                        <option value='All'>All</option>\n                        <option value='Senior Dev'>Senior Dev</option>\n                        <option value='Front End'>Front End</option>\n                        <option value='Back End'>Back End</option>\n                        <option value='Full Stack'>Full Stack</option>\n                        <option value='Junior Dev'>Junior Dev</option>\n                    </select>\n                </div>\n                <div>\n                    <label>Sort by birth date:</label>\n                        <select onChange={this.sortDob}>\n                            <option>Default</option>\n                            <option value='Oldest'>Oldest</option>\n                            <option value='Youngest'>Youngest</option>\n                        </select>\n                </div>\n                <table className='table table-striped table-hover'>\n                    <thead className='thead-secondary'>\n                        <tr>\n                            {/* <th>Profile Pic</th> */}\n                            <th>Name</th>\n                            <th>DOB</th>\n                            <th>Position</th>\n                            <th>Phone Number</th>\n                            <th>Email</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.state.employees.map(function (employee) {\n                            return (\n                                <tr key={employee.id}>\n                                    <td>{employee.name}</td>\n                                    <td>{employee.dob}</td>\n                                    <td>{employee.team}</td>\n                                    <td>{employee.phone}</td>\n                                    <td>{employee.email}</td>\n                                </tr>\n                            )\n                        })}\n                    </tbody>\n                </table>\n            </div>\n        );\n    }\n\n}\n\n\n","import React from 'react';\nimport Content from '../Content'\n\nfunction Main() {\n    return (\n        <div className='Main'>\n            <Content />\n        </div>\n    );\n  }\n\n  export default Main;","import React from 'react';\nimport Wrapper from './components/Wrapper'\nimport Container from './components/Container'\nimport Header from './components/Header'\nimport Main from './components/Main'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Container>\n        <Header />\n        <Main />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}